(window.webpackJsonp=window.webpackJsonp||[]).push([[302],{966:function(a,e,s){"use strict";s.r(e);var t=s(20),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_0x01-初始-kafak"}},[a._v("0x01 初始 kafak")])]),s("li",[s("a",{attrs:{href:"#_0x02-基本概念"}},[a._v("0x02 基本概念")])]),s("li",[s("a",{attrs:{href:"#_0x02-安装配置"}},[a._v("0x02 安装配置")])]),s("li",[s("a",{attrs:{href:"#_0x04-安装-kafka"}},[a._v("0x04 安装 kafka")])])])]),s("p"),a._v(" "),s("h3",{attrs:{id:"_0x01-初始-kafak"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x01-初始-kafak"}},[a._v("#")]),a._v(" "),s("code",[a._v("0x01")]),a._v(" 初始 "),s("code",[a._v("kafak")])]),a._v(" "),s("p",[s("code",[a._v("Kafka")]),a._v(" 起初是 由 "),s("code",[a._v("LinkedIn")]),a._v(" 公司采用 "),s("code",[a._v("Scala")]),a._v(" 语言开发的一个多分区、多副本且基于 "),s("code",[a._v("ZooKeeper")]),a._v(" 协调的分布式消息系统，现已被捐献给 "),s("code",[a._v("Apache")]),a._v(" 基金会。目前 "),s("code",[a._v("Kafka")]),a._v(" 已经定位为一个分布式流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用。目前越来越多的开源分布式处理系统如 "),s("code",[a._v("Cloudera、Storm、Spark、Flink")]),a._v(" 等都支持与 "),s("code",[a._v("Kafka")]),a._v(" 集成。")]),a._v(" "),s("p",[s("code",[a._v("Kafka")]),a._v(" 之所以受到越来越多的青睐，与它所“扮演”的三大角色是分不开的：")]),a._v(" "),s("ul",[s("li",[a._v("消息系统： "),s("code",[a._v("Kafka")]),a._v(" 和传统的消息系统（也称作消息中间件）都具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能。与此同时，"),s("code",[a._v("Kafka")]),a._v(" 还提供了大多数消息系统难以实现的消息顺序性保障及回溯消费的功能。")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("存储系统： "),s("code",[a._v("Kafka")]),a._v(" 把消息持久化到磁盘，相比于其他基于内存存储的系统而言，有效地降低了数据丢失的风险。也正是得益于 Kafka 的消息持久化功能和多副本机制，我们可以把 Kafka 作为长期的数据存储系统来使用，只需要把对应的数据保留策略设置为“永久”或启用主题的日志压缩功能即可。")])]),a._v(" "),s("li",[s("p",[a._v("流式处理平台： "),s("code",[a._v("Kafka")]),a._v(" 不仅为每个流行的流式处理框架提供了可靠的数据来源，还提供了一个完整的流式处理类库，比如窗口、连接、变换和聚合等各类操作。")])])]),a._v(" "),s("h3",{attrs:{id:"_0x02-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-基本概念"}},[a._v("#")]),a._v(" "),s("code",[a._v("0x02")]),a._v(" 基本概念")]),a._v(" "),s("p",[a._v("一个典型的 "),s("code",[a._v("Kafka")]),a._v(" 体系架构包括若干 "),s("code",[a._v("Producer")]),a._v("、若干 "),s("code",[a._v("Broker")]),a._v("、若干 "),s("code",[a._v("Consumer")]),a._v("，以及一个 "),s("code",[a._v("ZooKeeper")]),a._v(" 集群，如下图所示。其中 "),s("code",[a._v("ZooKeeper")]),a._v(" 是 "),s("code",[a._v("Kafka")]),a._v(" 用来负责集群元数据的管理、控制器的选举等操作的。"),s("code",[a._v("Producer")]),a._v(" 将消息发送到 "),s("code",[a._v("Broker")]),a._v("，"),s("code",[a._v("Broker")]),a._v(" 负责将收到的消息存储到磁盘中，而 "),s("code",[a._v("Consumer")]),a._v(" 负责从 "),s("code",[a._v("Broker")]),a._v(" 订阅并消费消息。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"http://images.atomblogs.com/20190814170930.png",loading:"lazy"}})]),a._v(" "),s("p",[s("strong",[a._v("核心概念")])]),a._v(" "),s("p",[s("strong",[s("code",[a._v("Producer")])]),a._v(": 生产者，也就是发送消息的一方。生产者负责创建消息，然后将其投递到 Kafka 中。")]),a._v(" "),s("p",[s("strong",[s("code",[a._v("Consumer")])]),a._v("： 消费者，也就是接收消息的一方。消费者连接到 "),s("code",[a._v("Kafka")]),a._v(" 上并接收消息，进而进行相应的业务逻辑处理。")]),a._v(" "),s("p",[s("strong",[s("code",[a._v("Broker")])]),a._v("： 服务代理节点。对于 "),s("code",[a._v("Kafka")]),a._v(" 而言，"),s("code",[a._v("Broker")]),a._v(" 可以简单地看作一个独立的 "),s("code",[a._v("Kafka")]),a._v(" 服务节点或 "),s("code",[a._v("Kafka")]),a._v(" 服务实例。大多数情况下也可以将 "),s("code",[a._v("Broker")]),a._v(" 看作一台 "),s("code",[a._v("Kafka")]),a._v(" 服务器，前提是这台服务器上只部署了一个 "),s("code",[a._v("Kafka")]),a._v(" 实例。一个或多个 "),s("code",[a._v("Broker")]),a._v(" 组成了一个 "),s("code",[a._v("Kafka")]),a._v(" 集群。一般而言，我们更习惯使用首字母小写的 "),s("code",[a._v("broker")]),a._v(" 来表示服务代理节点。")]),a._v(" "),s("h3",{attrs:{id:"_0x02-安装配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x02-安装配置"}},[a._v("#")]),a._v(" "),s("code",[a._v("0x02")]),a._v(" 安装配置")]),a._v(" "),s("h4",{attrs:{id:"_0001-安装jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0001-安装jdk"}},[a._v("#")]),a._v(" "),s("code",[a._v("0001")]),a._v(" 安装"),s("code",[a._v("JDK")])]),a._v(" "),s("h4",{attrs:{id:"_0010-安装-zookeeper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0010-安装-zookeeper"}},[a._v("#")]),a._v(" "),s("code",[a._v("0010")]),a._v(" 安装 "),s("code",[a._v("zookeeper")])]),a._v(" "),s("p",[a._v("下载安装包")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" /opt\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\n")])])]),s("p",[a._v("解压")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" zxvf ./zookeeper-3.4.14.tar.gz\n")])])]),s("p",[a._v("加入到环境变量当中")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /etc/profile\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ZOOKEEPER_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/opt/zookeeper-3.4.12\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ZOOKEEPER_HOME")]),a._v("/bin\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使配置生效")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" /etc/profile\n")])])]),s("p",[a._v("修改 "),s("code",[a._v("zookeeper")]),a._v(" 配置")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" conf\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" zoo_sample.cfg zoo.cfg\n")])])]),s("p",[a._v("修改 "),s("code",[a._v("zoo.cfg")]),a._v(" 配置")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ZooKeeper服务器心跳时间，单位为ms")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("tickTime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 投票选举新leader的初始化时间")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("initLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# leader与follower心跳检测最大容忍时间，响应超过syncLimit*tickTime，leader认为")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# follower“死掉”，从服务器列表中删除follower")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("syncLimit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 数据目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("dataDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/tmp/zookeeper/data\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 日志目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("dataLogDir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/tmp/zookeeper/log\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ZooKeeper对外服务端口")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("clientPort")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2181")]),a._v("\n")])])]),s("p",[a._v("创建日志和数据目录")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /tmp/zookeeper/data\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p /tmp/zookeeper/log\n")])])]),s("p",[a._v("启动 "),s("code",[a._v("zookeeper")]),a._v("服务")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("zkServer.sh start\n")])])]),s("h3",{attrs:{id:"_0x04-安装-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0x04-安装-kafka"}},[a._v("#")]),a._v(" "),s("code",[a._v("0x04")]),a._v(" 安装 "),s("code",[a._v("kafka")])]),a._v(" "),s("p",[s("strong",[a._v("下载 安装包")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" http://mirror.bit.edu.cn/apache/kafka/2.3.0/kafka_2.12-2.3.0.tgz\n")])])]),s("p",[s("strong",[a._v("解压并加入到环境变量中")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" zcvf kafka_2.12-2.3.0.tgz\n\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KAFKA_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/opt/kafka_2.12-2.3.0\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),a._v(":KAFKA_HOME/bin\n\n")])])]),s("p",[s("strong",[a._v("修改 kafka 的配置文件")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# broker的编号，如果集群中有多个broker，则每个broker的编号需要设置的不同")]),a._v("\nbroker.id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# broker对外提供的服务入口地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("listeners")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PLAINTEXT://localhost:9092\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 存放消息日志文件的地址")]),a._v("\nlog.dirs"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/tmp/kafka-logs\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Kafka所需的ZooKeeper集群地址，为了方便演示，我们假设Kafka和ZooKeeper都安装在本机")]),a._v("\nzookeeper.connect"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("localhost:2181/kafka\n")])])]),s("p",[s("strong",[a._v("启动 kafka 服务")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-server-start.sh config/server.properties\n")])])]),s("p",[s("strong",[a._v("创建主题")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-topics.sh --zookeeper localhost:2181/kafka --create --topic topic-demo --replication-factor "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" --partitions "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n")])])]),s("p",[s("strong",[a._v("创建消费者")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic-demo\n")])])]),s("p",[s("strong",[a._v("创建生产者")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic-demo\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);