(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{934:function(t,s,a){"use strict";a.r(s);var n=a(20),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"什么是二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是二叉树"}},[t._v("#")]),t._v(" 🔥 什么是二叉树❔")]),t._v(" "),a("p",[t._v("我也不知道怎么描述二叉树，有一个根节点 🔴 向下扩展两个子节点 🔴 两个子节点又可以向下扩展。类似于这样的结构成为二叉树")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318164309773.png",alt:"image-20200318164309773"}}),t._v(" "),a("p",[t._v("上面这种就够就是二叉树，当然有二叉树就有三叉树、四叉树。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318164534883.png",alt:"image-20200318164534883"}}),t._v(" "),a("h3",{attrs:{id:"树中相应节点的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树中相应节点的概念"}},[t._v("#")]),t._v(" 树中相应节点的概念")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318165011873.png",alt:"image-20200318165011873"}}),t._v(" "),a("ul",[a("li",[t._v("A 节点是 B 节点的【"),a("strong",[t._v("父节点")]),t._v("】")]),t._v(" "),a("li",[t._v("B 节点是 A 节点的【"),a("strong",[t._v("子节点")]),t._v("】")]),t._v(" "),a("li",[t._v("B、C、D 这三个节点的父亲节点是同一个节点，所以他们之间互称为【"),a("strong",[t._v("兄弟节点")]),t._v("】")]),t._v(" "),a("li",[t._v("E 节点没有父亲节点，所以我们把它称为【"),a("strong",[t._v("根节点")]),t._v("】")]),t._v(" "),a("li",[t._v("G、H、I、J、K、L 没有子节点，所以我们把它称为【"),a("strong",[t._v("叶子节点")]),t._v("】")]),t._v(" "),a("li",[t._v("节点的高度：节点到叶子节点的最长路径")]),t._v(" "),a("li",[t._v("节点的深度：根节点到这个节点所经历的节点个数")]),t._v(" "),a("li",[t._v("节点的层数：节点的深度 + 1")])]),t._v(" "),a("h3",{attrs:{id:"二叉树的种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的种类"}},[t._v("#")]),t._v(" 二叉树的种类")]),t._v(" "),a("p",[t._v("在二叉树之上，具备各种各样的其他属性，就会衍生出其他的树结构。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("满二叉树")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318170240608.png",alt:"image-20200318170240608"}}),t._v(" "),a("p",[t._v("叶子节点全都在最底层，除叶子节点外，每个节点都有两个子节点，这种二叉树叫做【"),a("strong",[t._v("满二叉树")]),t._v("】。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("完全二叉树")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318170532465.png",alt:"image-20200318170532465"}}),t._v(" "),a("p",[t._v("叶子节点都在最底下两层，最后一次的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做【"),a("strong",[t._v("完全二叉树")]),t._v("】")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("二分搜索树")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318171007366.png",alt:"image-20200318171007366"}}),t._v(" "),a("p",[t._v("若任意节点的左子树不为空，则左子树上所有节点的值均小于它的根节点的值；")]),t._v(" "),a("p",[t._v("若任意节点的右子树不为空，则右子树上所有节点的值均大于或等于它的根节点的值；")]),t._v(" "),a("p",[t._v("任何左子树或右子树也都为二分搜索树。")])]),t._v(" "),a("li",[a("p",[t._v("堆")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/xiaoxiunique/picgo-image/raw/master/atips/image-20200318195545250.png",alt:"image-20200318195545250"}}),t._v(" "),a("p",[t._v("堆就是用数组实现的二叉树，所以它没有使用父指针或子指针。堆根据堆属性来排序。")]),t._v(" "),a("p",[a("strong",[t._v("堆的常用方法")])]),t._v(" "),a("p",[t._v("构建优先队列、支持堆排序、支持找出一个集合中最小值（或者最大值）")]),t._v(" "),a("p",[t._v("堆分为两种：最大堆和最小堆，两者的差别在于节点的排序方式。")]),t._v(" "),a("p",[t._v("在最大堆中，父节点的值每一个子节点的值都要大。在最小堆中，父节点的值比每一个子节点的值都要小。这就是所谓的“堆属性”，并且这个属性对堆中的每一个节点都成立。")])]),t._v(" "),a("li",[a("p",[t._v("AVL")])]),t._v(" "),a("li",[a("p",[t._v("红黑树")])]),t._v(" "),a("li",[a("p",[t._v("线段树")])]),t._v(" "),a("li",[a("p",[t._v("字典树")])]),t._v(" "),a("li",[a("p",[t._v("并查集")])])]),t._v(" "),a("h3",{attrs:{id:"树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的遍历"}},[t._v("#")]),t._v(" 树的遍历")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("前序 根左右")])]),t._v(" "),a("li",[a("p",[t._v("中序 左根有")])]),t._v(" "),a("li",[a("p",[t._v("后序 左右根")])]),t._v(" "),a("li",[a("p",[t._v("DFS 深度优先遍历")]),t._v(" "),a("p",[t._v("代码模板（递归写法）")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("visited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dfs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# terminator")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# already visited ")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n\n\tvisited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# process current node here. ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" next_node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" next_node "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t\tdfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("非递归写法")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DFS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n\n\tvisited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tvisited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t\tprocess "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tnodes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generate_related_nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# other processing work ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("BFS 广度优先遍历（层序遍历）")]),t._v(" "),a("p",[t._v("代码模板")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BFS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    visited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tqueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n\tqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\t\tnode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tvisited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t\tprocess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tnodes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generate_related_nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\tqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# other processing work ")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);