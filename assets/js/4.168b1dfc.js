(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1057:function(a,t,s){"use strict";s.r(t);var r=s(20),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"javascript-设计思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-设计思想"}},[a._v("#")]),a._v(" JavaScript 设计思想")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(663),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"v8-执行-javascript-代码的完整流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行-javascript-代码的完整流程"}},[a._v("#")]),a._v(" V8 执行 JavaScript 代码的完整流程")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(664),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"v8-执行-javascript-代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行-javascript-代码"}},[a._v("#")]),a._v(" V8 执行 JavaScript 代码")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(665),loading:"lazy"}})]),a._v(" "),r("p",[a._v("其主要核心流程分为编译和执行两步。首先需要将 JavaScript 代码转换为低级中间代码或者机器能够理解的机器代码，然后再执行转换后的代码并输出执行结果。")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(666),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"高级代码为什么需要先编译再执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高级代码为什么需要先编译再执行"}},[a._v("#")]),a._v(" 高级代码为什么需要先编译再执行")]),a._v(" "),r("p",[a._v("CPU 不能直接识别汇编语言。")]),a._v(" "),r("p",[a._v("虽然汇编语言对机器语言做了一层抽象，减少了程序员理解机器语言的复杂度，但是汇编语言依然是复杂且繁琐的，即便你写一个非常简单的功能，也需要实现大量的汇编代码，这主要表现在以下两点。")]),a._v(" "),r("p",[a._v("首先，不同的 CPU 有着不同的指令集，如果要使用机器语言或者汇编语言来实现一个功能，那么你需要为每种架构的 CPU 编写特定的汇编代码，这会带来巨大的、枯燥繁琐的操作，你可以参看下图：")]),a._v(" "),r("h2",{attrs:{id:"解释执行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释执行流程"}},[a._v("#")]),a._v(" 解释执行流程")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(667),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"编译执行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译执行流程"}},[a._v("#")]),a._v(" 编译执行流程")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(668),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"函数申明和函数表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数申明和函数表达式"}},[a._v("#")]),a._v(" 函数申明和函数表达式")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(669),loading:"lazy"}})]),a._v(" "),r("p",[a._v("上方两处代码，执行的时候 使用函数表达式的 方式，执行会报错。提示 "),r("code",[a._v("foo is not a function")])]),a._v(" "),r("p",[a._v("原因是")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(670),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"javascript-中的-new"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的-new"}},[a._v("#")]),a._v(" JavaScript 中的 new")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("type"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("color")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" type\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("color "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" color\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),r("p",[a._v("上方 new 的对象，对应的 V8 的执行代码")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \ndog"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("__proto__ "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("prototype\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dog"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(671),loading:"lazy"}})]),a._v(" "),r("ul",[r("li",[a._v("首先，创建了一个空白对象 dog；")]),a._v(" "),r("li",[a._v("然后，将 DogFactory 的 prototype 属性设置为 dog 的原型对象，这就是给 dog 对象设置原型对象的关键一步，我们后面来介绍；")]),a._v(" "),r("li",[a._v("最后，再使用 dog 来调用 DogFactory，这时候 DogFactory 函数中的 this 就指向了对象 dog，然后在 DogFactory 函数中，利用 this 对对象 dog 执行属性填充操作，最终就创建了对象 dog。")])]),a._v(" "),r("h2",{attrs:{id:"java-script-运行时环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-script-运行时环境"}},[a._v("#")]),a._v(" Java Script 运行时环境")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(672),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"宿主环境和-v8-的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#宿主环境和-v8-的关系"}},[a._v("#")]),a._v(" 宿主环境和 V8 的关系")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(673),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"计算机的硬件组织架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机的硬件组织架构"}},[a._v("#")]),a._v(" 计算机的硬件组织架构")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(674),loading:"lazy"}})]),a._v(" "),r("p",[a._v("加载到内存中的程序")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(675),loading:"lazy"}})]),a._v(" "),r("p",[a._v("对应的 汇编")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(676),loading:"lazy"}})]),a._v(" "),r("p",[a._v("一旦二进制代码被装载进内存，CPU 便可以从内存中"),r("strong",[a._v("取出一条指令")]),a._v("，然后"),r("strong",[a._v("分析该指令")]),a._v("，最后"),r("strong",[a._v("执行该指令")]),a._v("。")]),a._v(" "),r("p",[a._v("我们把取出指令、分析指令、执行指令这三个过程称为一个 "),r("strong",[a._v("CPU 时钟周期")]),a._v("。")]),a._v(" "),r("h2",{attrs:{id:"将混乱的-二进制代码转换为有序的指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#将混乱的-二进制代码转换为有序的指令"}},[a._v("#")]),a._v(" 将混乱的 二进制代码转换为有序的指令")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(677),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"当一个函数执行-内部压栈状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#当一个函数执行-内部压栈状态"}},[a._v("#")]),a._v(" 当一个函数执行，内部压栈状态")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(678),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"函数调用结束之后-如何恢复现场-回到上一个函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数调用结束之后-如何恢复现场-回到上一个函数"}},[a._v("#")]),a._v(" 函数调用结束之后，如何恢复现场（回到上一个函数）")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(679),loading:"lazy"}})]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(680),loading:"lazy"}})]),a._v(" "),r("p",[a._v("esp 寄存器中保存了栈顶的指针，ebp 寄存器中保存了 调用方法的开始的位置，栈帧中也存储了函数的调用的相关信息，在函数执行结束时，只需要向下移动即可。")]),a._v(" "),r("h2",{attrs:{id:"抽象语法树解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树解析"}},[a._v("#")]),a._v(" 抽象语法树解析")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("b")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" d "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" f "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" d "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" f "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" c "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),r("p",[a._v("对应的抽象语法树")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(681),loading:"lazy"}})]),a._v(" "),r("p",[a._v("代码解析完成之后，V8 便会按照顺序自上而下执行代码，首先会先执行“a=1”和“c=4”这两个赋值表达式，接下来执行 foo 函数的调用，过程是从 foo 函数对象中取出函数代码，然后和编译顶层代码一样，V8 会先编译 foo 函数的代码，编译时同样需要先将其编译为抽象语法树和字节码，然后再解释执行。")]),a._v(" "),r("h2",{attrs:{id:"js-执行字节码的状态图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js-执行字节码的状态图"}},[a._v("#")]),a._v(" JS 执行字节码的状态图")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(682),loading:"lazy"}})]),a._v(" "),r("h2",{attrs:{id:"ui-线程处理任务流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ui-线程处理任务流程"}},[a._v("#")]),a._v(" UI 线程处理任务流程")]),a._v(" "),r("p",[r("img",{staticClass:"lazy",attrs:{alt:"img","data-src":s(683),loading:"lazy"}})])])}),[],!1,null,null,null);t.default=e.exports},663:function(a,t,s){a.exports=s.p+"assets/img/f8fb9e3570b88152f9ab7b6b8d385c7a-1598448240374.f8fb9e35.jpg"},664:function(a,t,s){a.exports=s.p+"assets/img/8a34ae8c1a7a0f87e19b1384a025e354.8a34ae8c.jpg"},665:function(a,t,s){a.exports=s.p+"assets/img/ca2cf22c8b2b322022666a3183db1b4d.ca2cf22c.jpg"},666:function(a,t,s){a.exports=s.p+"assets/img/b77593de2fc7754d146e1218c45ef2bf.b77593de.jpg"},667:function(a,t,s){a.exports=s.p+"assets/img/330ad69589d898f6609dfc083bfbe95e.330ad695.jpg"},668:function(a,t,s){a.exports=s.p+"assets/img/1f933e42e81dacc8f4f2d86e01a914d3.1f933e42.jpg"},669:function(a,t,s){a.exports=s.p+"assets/img/51ae06e8a9dc4a589958065429bec231.51ae06e8.jpg"},670:function(a,t,s){a.exports=s.p+"assets/img/a74668eb5bf183538ce9b47a20eb0610.a74668eb.jpg"},671:function(a,t,s){a.exports=s.p+"assets/img/19c63a16ec6b6bb67f0a7e74b284398c.19c63a16.jpg"},672:function(a,t,s){a.exports=s.p+"assets/img/9ad5d32bce98aad219c9f73513ac6349.9ad5d32b.jpg"},673:function(a,t,s){a.exports=s.p+"assets/img/e541d8611b725001509bfcd6797f492f.e541d861.jpg"},674:function(a,t,s){a.exports=s.p+"assets/img/880dc63d333d8d18d8be9a473b15e06d.880dc63d.jpg"},675:function(a,t,s){a.exports=s.p+"assets/img/99bc9f08d975daf9b86bba72b22ccddf.99bc9f08.jpg"},676:function(a,t,s){a.exports=s.p+"assets/img/34fb571ceb09f9d2cba60fcac11a75ee.34fb571c.png"},677:function(a,t,s){a.exports=s.p+"assets/img/81f37939dc9920c1e0e261c7f345ceb3.81f37939.jpg"},678:function(a,t,s){a.exports=s.p+"assets/img/27f1a623219737f376deddfefb865478.27f1a623.jpg"},679:function(a,t,s){a.exports=s.p+"assets/img/68b9d297cc48864ad49c1915766fa6bd.68b9d297.jpg"},680:function(a,t,s){a.exports=s.p+"assets/img/89180f0674a92df96ce6f25813020ed2.89180f06.jpg"},681:function(a,t,s){a.exports=s.p+"assets/img/e52476efb6ef924e74f470ead4970262.e52476ef.jpg"},682:function(a,t,s){a.exports=s.p+"assets/img/b3a3e88341d762bb7467ca2941e4c356.b3a3e883.jpg"},683:function(a,t,s){a.exports=s.p+"assets/img/20200808095013.b5c6a4cd.jpg"}}]);